为什么要学习StringJoiner?
public StringJoiner(间隔符号) 创建一个StringJoiner对象,指定拼接时的间隔符号
public StringJoiner(间隔符号,开始符号,结束符号) 创建一个StringJoiner对象,指定拼接时的间隔符号,开始符号,结束符号
StringJoiner sj = new SreingJoiner ("----");
StringJoiner的成员方法
public Stringjoiner add(添加的内容) 添加数据,并返回对象本身
public int length() 返回长度(字符出现的个数)
public String toString 返回一个字符串(该字符串是拼接之后的结果)
string 是表示字符串的类
stringbuilder 可以快速的操作字符串
StringJoiner jdk8出现的字符串操作

字符串的原理:
#########################################################################
字符串存储的内存原理:
直接赋值会复用字符串常量池中的
new出现不会复用,二是开辟一个新空间
#########################################################################
==号比较的到底是什么:
基本数据类型比较的是数据值
引用数据类型比较的是地址值
#########################################################################
字符串拼接的底层原理:
两种情况:
第一种情况=右边没有变量参与
编译的时候就是最终的结果,拼接的时候没有变量,都是字符串,触发字符串的优化机制
第二种情况=右边有变量参与
会使用new创建引用数据类型变量
通过append方法添加字符串然后通过toString方法变成字符串
jdk8之前:系统底层会自动创建一个stringbuilder对象,然后会在调用其appened方法进行拼接,拼接后,再调用其toString类型,而toString方法的底层是直接new了一个字符串对象
jdk8版本:系统会预估要
new stringbuilder() tostring
一个加内存中有两个对象.
jdk8之前创建四个对象 jdk8之后会预估位置
用stringbuilder,stringjoiner
#########################################################################
jdk8之前:系统底层会自动创建一个stringbuilder对象,然后再调用其append方法完成拼接.
        拼接之后,再调用toString方法转化为string类型,而toString方法的底层是直接new一个字符串对象.
jdk8之后:系统会预估要字符串拼接之后的总大小,把要拼接的内容放在数组中,此时产生一个新的字符串.
一种是记录串池中的地址值
新new出来的对象
总结:
如果没有变量参与,都是字符串直接相加,编译以后就是拼接之后的结果,会复用串中的字符串.
没有变量参与,每一行拼接的代码,都会在内存中创建新的字符串,浪费内存.
stringbuilder所有要拼接的内容都往stringbuilder中放置.不会创建很多没用的空间,节约内存.
stringbuilder不会爆炸,底层会创建字节数组.
//字符串原理的小节
字符串原理小结:
字符串存储的内存原理:
直接赋值会复用字符串常池中的
new出来不会复用,而是开辟一个新空间
==号比较的到底是什么
基本数据类型比较的是数据值
引用数据类型比较的是地址值
字符串拼接的底层原理
如果没有变量参与,都是字符创直接相加,编译之后就是直接拼接之后的结果,会复用串池中的字符串
如果有变量参与,会创建新的字符串,浪费内存
stringbuilder提高效率的原理
所有要拼接的内容都会往stringbuilder中放,不会创建很多无用的空间,浪费内存.